module MonitrcParser

  grammar Monitrc

    rule monitrc
      (whitespace / check_process)* {
        def content
          elements.map(&:content).compact
        end
      }
    end

    rule check_process
      'check' whitespace 'process' whitespace name check_process_options {
        def content
          CheckProcess.new(name.content, check_process_options.content)
        end
      }
    end

    rule check_process_options
      (whitespace / with_pidfile / start_program / stop_program / group /
      mode / process_resource_test)* {
        def content
          elements.select { |e| e.content }.inject({}) do |options, option|
            options.merge(option.content) { |key,old,new| [old, new] }
          end
        end
      }
    end

    rule with_pidfile
      'with' whitespace 'pidfile' whitespace pidfile {
        def content
          { :pidfile => pidfile.content }
        end
      }
    end

    rule start_program
      'start' whitespace 'program' whitespace ('=' whitespace)? command {
        def content
          { :start => {
              :command => command.content,
            },
          }
        end
      }
    end

    rule stop_program
      'stop' whitespace 'program' whitespace ('=' whitespace)? command {
        def content
          { :stop => {
              :command => command.content,
            },
          }
        end
      }
    end

    rule group
      'group' whitespace group_name {
        def content
          { :group => group_name.content }
        end
      }
    end

    rule mode
      'mode' whitespace mode_name {
        def content
          { :mode => mode_name.content }
        end
      }
    end

    rule process_resource_test
      'if' whitespace process_resource whitespace operator whitespace value
      whitespace? unit whitespace cycles:cycles? 'then' whitespace
      action {
        def content
          { :if =>
            ResourceTest.new(process_resource.content, operator.content,
            value.content, unit.content, action.content,
            cycles.empty? ? nil : cycles.content)
          }
        end
      }
    end

    rule pidfile
      string
    end

    rule name
      string
    end

    rule command
      string
    end

    rule group_name
      string
    end

    rule mode_name
      ('active' / 'passive' / 'manual') {
        def content
          text_value
        end
      }
    end

    rule process_resource
      ('cpu' / 'totalcpu' / 'memory' / 'children' / 'totalmem' /
      'loadavg' ('1m' / '5m' / '15m')) {
        def content
          text_value
        end
      }
    end

    rule operator
      ('<' / '>' / '!=' / '==' / 'gt' / 'lt' / 'eq' / 'ne' / 'greater' /
      'less' / 'equal' / 'notequal') {
        def content
          text_value
        end
      }
    end

    rule value
      (real / integer)
    end

    rule unit
      ('%' / 'B' / 'kB' / 'MB' / 'GB') {
        def content
          text_value
        end
      }
    end

    rule cycles
      'for' whitespace cycle_count whitespace 'cycles' whitespace {
        def content
          cycle_count.content
        end
      }
    end

    rule cycle_count
      integer
    end

    rule action
      ('alert' / 'restart' / 'start' / 'stop' / 'exec' / 'unmonitor') {
        def content
          text_value
        end
      }
    end

    rule whitespace
      [\s]+ {
        def content
        end
      }
    end

    rule string
      quoted_string / bare_string
    end

    rule quoted_string
      '"' [^"]* '"' {
        def content
          text_value[1..-2]
        end
      }
    end

    rule bare_string
      [^\s]+ {
        def content
          text_value
        end
      }
    end

    rule real
      [\d]+ [.] [\d]+ {
        def content
          text_value.to_f
        end
      }
    end

    rule integer
      [\d]+ {
        def content
          text_value.to_i
        end
      }
    end

  end

end
